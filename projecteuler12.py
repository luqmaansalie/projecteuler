
# https://projecteuler.net/problem=12

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

import time

def getFactors(n):
	allFactors = []
	s = 1

	if n % 2:
		s = 2

	for i in range(1, int(n**0.5) + 1, s):
		if not n % i:
			allFactors.append(i)
			allFactors.append(n//i)
	
	#count = len(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))
	count = len(set(allFactors))

	return count

def factors(n):
	i = 1
	factors = 0

	while i * i < n:
		if not n % i:
			factors += 1
		i += 1
	
	if i * i == n:
		return 2 * factors + 1
	return 2 * factors

i = 1
a = 1

start = time.time()

while True:
	#a = i*(i + 1)//2
	#x = getFactors(a)

	if not a % 2:
		x = factors(a//2) * factors(a - 1)
	else:
		x = factors(a//2) * factors(a)

	if x > 500:
		#print(a)
		print(a*(a-1)/2)
		break
	#i += 1
	a += 1


end = time.time()

#print(end - start)